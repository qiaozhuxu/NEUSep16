/**
 * Assignment for your lecture 2. Please finish all the questions under
 * 'Assignment'. Please try the two questions under 'Bonus'. Please write some
 * tests as practice. When you are writing tests, you should think about what
 * situations might cause error? like 0,-1... The deadline of this assignment is
 * 09/22/2016 23:59. Please feel free to contact me for any questions.
 * 
 * @author Jia
 */

class Person {
	int age;
	boolean gender;// false --> male, true --> female

	Person(int age, boolean gender) {
		this.age = age;
		this.gender = gender;
	}
}

public class Assignment2 {
	// Assignment
	/**
	 * Write a Computer program to find the type of a person and print the type.
	 * Infant : If the age is less than 1 year Toddler : If the age is less than
	 * 3 and greater than 1 Pre Schooler : If the age is less than 5 and greater
	 * than 3 KG Girl : If the age is greater than 5 and less than 6 and the
	 * gender is female KG Boy : If the age is greater than 5 and less than 6
	 * and the gender is male
	 */
	public void personType(Person person) {
		if (person == null)
			return;
		if (person.age < 1)
			System.out.println("Infant");
		else if (person.age < 3)
			System.out.println("Toddler");
		else if (person.age < 5)
			System.out.println("Pre Schooler");
		else if (person.age < 6)
			System.out.println(person.gender ? "KG Girl" : "KG Boy");
	}

	/**
	 * Given an integer N as input, check the following: If N is odd, print
	 * "Weird". If N is even and, in between the range of 2 and 5(inclusive),
	 * print "Not Weird". If N is even and, in between the range of 6 and
	 * 20(inclusive), print "Weird". If N is even and N>20, print "Not Weird".
	 */
	public void weirdNumber(int n) {
		if (n % 2 == 1) {
			System.out.println("Weird");
		} else {
			if (2 <= n && n <= 5) {
				System.out.println("Not Weird");
			} else if (6 <= n && n <= 20) {
				System.out.println("Weird");
			} else if (n > 20) {
				System.out.println("Not Weird");
			}
		}
	}

	/**
	 * Write a method to determine whether a number is prime
	 */
	public void isPrime(int n) {
		if (n < 2) {
			System.out.println(n + " is NOT a prime number.");
		}
		for (int j = 2; j * j <= n; j++) {
			if (n % j == 0) {
				System.out.println(n + " is NOT a prime number.");
			}
		}
		System.out.println(n + " is a prime number.");	
	}

	/**
	 * Find N fibonacci numbers Fibonacci Number: f(N) = f(N-1)+f(N-2).
	 * Typically, f(0)=f(1)=1.
	 */
	public int[] fibonacciNumber(int n) {
		if (n < 1)
			return null;
		int[] res = new int[n];
		for (int i = 0; i < n; i++) {
			if (i < 2)
				res[i] = 1;
			else
				res[i] = res[i - 1] + res[i - 2];
		}
		return res;
	}

	/**
	 * Write a function that takes a string as input and returns the string
	 * reversed. Given s = "hello", return "olleh".
	 */
	public String reverseString(String s) {
		String res = "";
		for (char c : s.toCharArray()) {
			res = c + res;
		}
		return res;
	}

	/**
	 * Given an array of nums, write a function to find the largest two integer.
	 */
	public int[] findTheLargestTwo(int[] nums) {
		if (nums == null || nums.length <= 2) {
			return null;
		}

		int largestA = Integer.MIN_VALUE, largestB = Integer.MIN_VALUE;
		for (int n : nums) {
			if (n > largestA) {
				largestB = largestA;
				largestA = n;
			} else if (n > largestB) {
				largestB = n;
			}
		}
		return new int[] { largestA, largestB };
	}

	/**
	 * Given an array nums, write a function to move all 0's to the end of it
	 * while maintaining the relative order of the non-zero elements. For
	 * example, given nums = [0, 1, 0, 3, 12], after calling your function, nums
	 * should be [1, 3, 12, 0, 0].
	 */
	public void moveZeroes(int[] nums) {
		if (nums == null || nums.length == 0)
			return;

		int insertPos = 0;
		for (int num : nums) {
			if (num != 0)
				nums[insertPos++] = num;
		}

		while (insertPos < nums.length) {
			nums[insertPos++] = 0;
		}
	}

	// Bonus
	/**
	 * Given a non-negative integer n, repeatedly add all its digits until the
	 * result has only one digit. For example: Given n = 38, the process is
	 * like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
	 */
	public int addDigits(int n) {
		while (n > 9) {
			int temp = 0;
			while (n != 0) {
				temp += n % 10;
				n /= 10;
			}
			n = temp;
		}
		return n;
	}

	/**
	 * Write a program to check whether a given number is an ugly number. Ugly
	 * numbers are positive numbers whose prime factors only include 2, 3, 5.
	 * For example, 6, 8 are ugly, while 14 is not ugly since it includes
	 * another prime factor 7. Note that 1 is typically treated as an ugly
	 * number.
	 */
	public boolean isUgly(int n) {
		if (n < 4)
			return n > 0;
		while (n % 2 == 0)
			n = n / 2;
		while (n % 3 == 0)
			n = n / 3;
		while (n % 5 == 0)
			n = n / 5;
		return n == 1;
	}

}
