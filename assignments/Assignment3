/**
 * Finish assignments, try bonus. Deadline: Before the next class.
 * 
 * @author Jia
 */
public class Assignment3 {
	// assignments
	/**
	 * Write a method to find N numbers which are power of three. e.g. n=4,
	 * return {1,3,9,27}
	 */
	public int[] findPowerOfThree(int n) {
		if(n<1) return null;
		int[] results = new int[n];
        	results[0] = 1;
		for(int i=1;i<n;i++){
			results[i] = 3*results[i-1];
		}
		return results;
	}

	/**
	 * Given a integer 'n', return n%count, count is the number of digits of n
	 * For example, n = 100, return 1
	 */
	public int countDigits(int n) {
		if(n==0) return 0;
		int count = 0;
		int temp = n;
		while(temp!=0){
			temp/=10;
			count++;
		}
		return n%count;
	}

	/**
	 * Given a integer 'n', if n is odd, print n odd numbers, if n is even,
	 * print n even numbers. For example, n = 3, print 1 3 5 n = 4, print 0 2 4
	 * 6
	 */
	public void printNumbers(int n) {
		int print = n%2==0?0:1;
		for(int i=0;i<n;i++){
			System.out.println(print);
			print+=2;
		}	
	}

	/**
	 * Given numRows, generate the first numRows of Pascal's triangle. For
	 * example, given numRows = 5, return: [1] [1,1] [1,2,1] [1,3,3,1]
	 * [1,4,6,4,1]
	 */
    	public List<List<Integer>> generate(int numRows) {
        	List<List<Integer>> res = new ArrayList<List<Integer>>();
        	if(numRows <= 0){
        	    	return res;
        	}
        
       		for(int i = 0; i < numRows; i++){
            		List<Integer> tmp = new ArrayList<Integer>();
           		for(int j = 0; j < i + 1; j++){
                		if(j == 0 || j == i){
                    			tmp.add(1);
                		}else{
                    			tmp.add(res.get(i-1).get(j-1) + res.get(i-1).get(j));
                		}
            		}
            		res.add(tmp);
        	}
		return res;
    	}

	/**
	 * Write a function that takes a string as input and reverse only the vowels
	 * of a string. For example: Given s = "hello", return "holle".
	 */
	public String reverseVowels(String s) {
        	char[] list=s.toCharArray();
        	Set<Character> set=new HashSet<>();
        	set.add('a');
        	set.add('e');
        	set.add('i');
        	set.add('o');
        	set.add('u');
        	set.add('A');
        	set.add('E');
        	set.add('I');
        	set.add('O');
        	set.add('U');
        	for(int i=0,j=list.length-1;i<j;){
            		if(!set.contains(list[i])){
                		i++;
                		continue;
            		}
            		if(!set.contains(list[j])){
                		j--;
                		continue;
            		}
            		char temp=list[i];
            		list[i]=list[j];
            		list[j]=temp;
            		i++;
            		j--;
        	}
        	return String.valueOf(list);
	}

	/**
	 * Given a string s consists of upper/lower-case alphabets and empty space
	 * characters ' ', return the length of last word in the string. If the last
	 * word does not exist, return 0. Note: A word is defined as a character
	 * sequence consists of non-space characters only.
	 */
	public int lengthOfLastWord(String str) {
		str = str.trim();
        	return str.length()-1-str.lastIndexOf(" ");
	}

	/**
	 * Reverse a string by words. Do not use 'split' function. e.g. "I like
	 * soccer" --> "soccer like I"
	 */
	public String reverseString2(String str) {
		String res = "";
		for(int i=0;i<str.length();i++){
			String temp = "";
			while(i<str.length()&&str.charAt(i)!=' '){
				temp = temp+str.charAt(i++);
			}
			res = temp+" "+res;
		}
		return res.trim();
	}

	// Bonus
	/**
	 * A robot from Mars send a long message to Earth which only contains many
	 * "SOS", like "SOSSOS", "SOSSOSSOSSOSSOS" But the radiation from universe
	 * changed some characters of the massage. Write a method to count how many
	 * characters were changed. For example, "SOSSOSSOS" might be changed to
	 * "SOSSUSSOP", then your method should return 2. The message was consisted
	 * by "SOS" so its length will be multiple of 3. You could assume the
	 * message only contains upper letter.
	 */
	public int checkMessage(String message) {
		int len = message.length(), i = 0, count = 0;
        	while(i<len){
            		if(message.charAt(i++)!='S') count++;
            		if(message.charAt(i++)!='O') count++;
            		if(message.charAt(i++)!='S') count++;
        	}
        	return count;
	}
}
